SHOW DATABASES;
USE fastcampus;
SELECT * FROM customers;     -- customer_id, customer_name, gender, age, home_address, zip_code, city, state, country
SELECT * FROM orders;        -- order_id, customer_id, payment, order_date, delivery_date

# mission1: 등급 분류 후 1등급 고객 정보 출력하기
SELECT COUNT(DISTINCT A.customer_id) AS total_customer,    -- 1000
	   (SELECT COUNT(DISTINCT customer_id) FROM orders) AS order_customer    -- 617
FROM customers AS A;

# 155/155/155/152/393(주문x) 으로 고객 분류를 진행한다.
SELECT CASE WHEN A.rank_num IS NULL THEN '5등급'
			WHEN A.rank_num<=155 THEN '1등급'
			WHEN A.rank_num<=310 THEN '2등급'
            WHEN A.rank_num<=465 THEN '3등급'
            ELSE '4등급' END AS grade,
		B.customer_id, A.rank_num, B.customer_name, B.gender, B.age, B.home_address
FROM (SELECT customer_id, SUM(payment) AS total_price, ROW_NUMBER() OVER (ORDER BY SUM(payment) DESC) AS rank_num
	  FROM orders
      GROUP BY 1) AS A
RIGHT JOIN customers AS B
ON A.customer_id = B.customer_id
ORDER BY GRADE, RANK_NUM;

# 1등급 고객의 정보를 출력해보자
WITH tbl_purchase AS (SELECT customer_id, COUNT(*) AS num_purchase,
							 AVG(payment) AS avg_purchase
					  FROM orders GROUP BY 1)

SELECT A.rank_num, B.customer_id, B.customer_name, B.gender, B.age, B.home_address,
	   (SELECT num_purchase FROM tbl_purchase WHERE customer_id=B.customer_id) AS num_purchase,
       A.total_price,
       (SELECT avg_purchase FROM tbl_purchase WHERE customer_id=B.customer_id) AS avg_purchase
FROM (SELECT customer_id,
			 SUM(payment) AS total_price,
             ROW_NUMBER() OVER (ORDER BY SUM(payment) DESC) AS rank_num
	  FROM orders
      GROUP BY 1) AS A
RIGHT JOIN customers AS B
ON A.customer_id = B.customer_id
WHERE A.rank_num<=155
ORDER BY A.rank_num ASC;

# mission2: KPI 지표 수립하기
SELECT DISTINCT YEAR(order_date) FROM orders;      -- 2021
SELECT DISTINCT MONTH(order_date) FROM orders ORDER BY 1;    -- 1월~10월

# 2-1. date에 따른 매출 분석
# Monthly Revenue
SELECT DATE_FORMAT(order_date, '%m') AS month, SUM(payment) AS M_Revenue  -- 3월이 가장 높다
FROM orders GROUP BY 1 ORDER BY 1;

# Monthly Average Revenue
SELECT DATE_FORMAT(date_at, '%m') AS month, AVG(Revenue) AS M_A_Revenue       -- 마찬가지로 3월이 가장 높다
FROM (SELECT DATE_FORMAT(order_date, '%Y-%m-%d') AS date_at, SUM(payment) AS Revenue
	  FROM orders GROUP BY 1) AS A
GROUP BY 1 ORDER BY 1;

# 3월의 Daily Revenue, 구매건수, 증감폭, 증감률
SELECT DATE_FORMAT(order_date, '%Y-%m-%d') AS date_at,
	   SUM(payment) AS Revenue, COUNT(*) AS num_purchase,    -- 한 달 내내 올라갔다가 내려갔다를 반복함. 요일별 구매율 차이가 있을 것으로 보임
       SUM(payment) - LAG(SUM(payment)) OVER (ORDER BY DATE_FORMAT(order_date, '%Y-%m-%d')) as increased_dif,
       (SUM(payment) - LAG(SUM(payment)) OVER (ORDER BY DATE_FORMAT(order_date, '%Y-%m-%d')))/LAG(SUM(payment)) OVER (ORDER BY DATE_FORMAT(order_date, '%Y-%m-%d')) as increased_proportion
FROM orders
WHERE DATE_FORMAT(order_date, '%Y-%m-%d')>='2021-03-01' 
	AND DATE_FORMAT(order_date, '%Y-%m-%d')<'2021-04-01'
GROUP BY 1
ORDER BY 1;

# 3월의 요일별 Revenue
SELECT DATE_FORMAT(order_date, '%W') AS day_name,     -- 월/화/수가 높은 매출을 보임
       SUM(payment) AS Revenue
FROM orders
WHERE DATE_FORMAT(order_date, '%Y-%m-%d')>='2021-03-01' 
	AND DATE_FORMAT(order_date, '%Y-%m-%d')<'2021-04-01'
GROUP BY 1
ORDER BY 2 DESC;

# 2-2. 세그먼트별 매출 분석
# gender&age
SELECT DISTINCT gender, COUNT(*) AS cnt FROM customers GROUP BY 1 ORDER BY 2 DESC;     -- 종류가 굉장히 많다
SELECT DISTINCT age, COUNT(*) AS cnt FROM customers GROUP BY 1 ORDER BY 1;      -- 20세부터 80세까지

# country&state&city
SELECT DISTINCT country, COUNT(*) AS cnt FROM customers GROUP BY 1 ORDER BY 2 DESC; -- Australia
SELECT DISTINCT state, COUNT(*) AS cnt FROM customers GROUP BY 1 ORDER BY 2 DESC;  -- 호주의 8개 주
SELECT DISTINCT city, COUNT(*) AS cnt FROM customers GROUP BY 1 ORDER BY 2 DESC;   -- 최대 고객이 3명이며 도시 종류도 매우 많다

# age group과 state를 세그먼트 기준으로 선정한다.
# 세그먼트별 Demographic
SELECT CASE WHEN age<30 THEN '20대'
			WHEN age<40 THEN '30대'
            WHEN age<50 THEN '40대'
            WHEN age<60 THEN '50대'
            WHEN age<70 THEN '60대'
            ELSE '70대' END AS age_grp,
		STATE,
		COUNT(*) AS cnt
FROM customers
GROUP BY 1, 2
ORDER BY 3 DESC;

# 세그먼트별 구매 금액 및 주문건수
SELECT CASE WHEN A.age<30 THEN '20대'
			WHEN A.age<40 THEN '30대'
            WHEN A.age<50 THEN '40대'
            WHEN A.age<60 THEN '50대'
            WHEN A.age<70 THEN '60대'
            ELSE '70대' END AS age_grp,
		A.STATE,
        SUM(B.payment) AS total_pay,
		COUNT(*) AS num_purchase
FROM customers AS A
INNER JOIN orders AS B
ON A.customer_id=B.customer_id
GROUP BY 1, 2
ORDER BY 3 DESC, 4 DESC;
